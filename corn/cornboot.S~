bits 	16			; Let's boot in 16-bit real mode first
org 	0x7c00			; Offset for code

boot:
; ------------------------------- Real mode code goes below here
; ------------------------------- 32-bit stuff below
	mov ax, 0x2401
	int 0x15		; enable A20
	mov ax, 0x3
	int 0x10		; better vga
	cli
	lgdt [gdt_ptr]		; loading GDT table
	mov eax, cr0
	or eax, 0x1		; protected mode
	mov cr0, eax
	jmp CODE_SEG:boot_high
gdt_start:
	dq 0x0
gdt_code:
	dw 0xFFFF
	dw 0x0
	db 0x0
	db 10011010b
	db 11001111b
	db 0x0
gdt_data:
	dw 0xFFFF
	dw 0x0
	dw 0x0
	db 10010010b
	db 11001111b
	db 0x0
gdt_end:
gdt_ptr:
	dw gdt_end - gdt_start
	dd gdt_start

CODE_SEG equ gdt_code - gdt_start
DATA_SEG equ gdt_data - gdt_start

bits 32				; Now we're talking
boot_high:
	mov ax, DATA_SEG
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	mov ss, ax
	mov esi, init_msg
	mov ebx, 0xb8000
.loop:
	lodsb
	or al, al
	jz halt
	or eax, 0x0100
	mov word [ebx], ax
	add ebx, 2
	jmp .loop
halt:				; Clearing screen & halting
	cli
	hlt

init_msg: db "Welcome to the Corn Bootloader!", 0

times 510 - ($-$$) db 0		; Filling zeroes
dw 0xaa55			; Bootable